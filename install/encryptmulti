#!/bin/bash

build() {
    local mod

    add_module 'dm-crypt'
    add_module 'dm-integrity'
    if [[ $CRYPTO_MODULES ]]; then
        for mod in $CRYPTO_MODULES; do
            add_module "$mod"
        done
    else
        add_all_modules '/crypto/'
    fi

    add_binary 'cryptsetup'

    map add_udev_rule \
        '10-dm.rules' \
        '13-dm-disk.rules' \
        '95-dm-notify.rules' \
        '/usr/lib/initcpio/udev/11-dm-initramfs.rules'

    # cryptsetup calls pthread_create(), which dlopen()s libgcc_s.so.1
    add_binary '/usr/lib/libgcc_s.so.1'

    add_runscript
}

help() {
    cat <<HELPEOF
This hook extends encrypt to allow multiple encrypted devices to be unlocked.
One may need it if the root partition is in a LVM composed of two encrypted
devices. Users should specify the devices to be unlocked using
'cryptdevices=device1:dmanme1%device2:dbname2%...' on the kernel command line,
where 'device#' is the path to the raw device, and 'dbname#' is the name given
to the device after unlocking, and will be available as /dev/mapper/dbname#.

For unlocking via keyfile, 'cryptkey=device:fstype:path' should be specified on
the kernel cmdline, where 'device' represents the raw block device where the
key exists, 'fstype' is the filesystem type of 'device' (or auto), and 'path'
is the absolute path of the keyfile within the device. Note that the same
keyfile will be used to all the devices defined by cryptdevice.

Without specifying a keyfile, you will be prompted for the password at runtime
for each device defined by cryptdevice.  This means you must have a keyboard
available to input it, and you may need the keymap hook as well to ensure that
the keyboard is using the layout you expect.
HELPEOF
}

# vim: set ft=sh ts=4 sw=4 et:

